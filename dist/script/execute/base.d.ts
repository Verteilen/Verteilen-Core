import { CronJobState, ExecuteProxy, ExecuteState, Job, Libraries, Messager, Database, Project, Record, Task, WebsocketPack, WorkState } from "../../interface";
import { WebsocketManager } from "../socket_manager";
import { Util_Parser } from './util_parser';
import { Region_Project } from './region_project';
export declare class ExecuteManager_Base {
    uuid: string;
    name: string;
    record: Record;
    current_projects: Array<Project>;
    current_nodes: Array<WebsocketPack>;
    state: ExecuteState;
    t_state: ExecuteState;
    jobstack: number;
    first: boolean;
    libs: Libraries | undefined;
    proxy: ExecuteProxy | undefined;
    localPara: Database | undefined;
    websocket_manager: WebsocketManager;
    messager_log: Messager;
    runner: Region_Project | undefined;
    constructor(_name: string, _websocket_manager: WebsocketManager, _messager_log: Messager, _record: Record);
    get current_p(): Project | undefined;
    get current_t(): Task | undefined;
    get current_multithread(): number;
    get current_task_count(): number;
    get current_cron(): Array<CronJobState>;
    get current_job(): Array<WorkState>;
    protected sync_local_para: (target: Database) => void;
    protected sync_para: (target: Database, source: WebsocketPack) => void;
    protected release: (source: WebsocketPack) => void;
    protected check_all_cron_end: () => boolean;
    protected check_cron_end: (cron: CronJobState) => boolean;
    protected check_single_end: () => boolean;
    protected validation: (projects: Array<Project>) => boolean;
    protected filter_lib: (projects: Array<Project>, lib: Libraries) => Libraries;
    protected get_task_multi_count: (t: Task) => number;
    get_task_state_count(t: Task): number;
    protected get_number(key: string): number;
    static get_number_global(key: string, localPara: Database | undefined): number;
    protected removeDups: (arr: any[]) => any[];
    protected get_idle: () => Array<WebsocketPack>;
    protected get_idle_open: () => Array<WebsocketPack>;
    protected check_socket_state: (target: WebsocketPack) => ExecuteState.NONE | ExecuteState.RUNNING;
    static string_args_transform: (task: Task, job: Job, messager_log: Messager, localPara: Database, n: number) => void;
    static property_update: (task: Task, e: Util_Parser) => Util_Parser;
    static database_update: (localPara: Database, n?: number) => Util_Parser;
}
