import { CronJobState, Database, ExecuteState, Project, Task, WebsocketPack, WorkState } from "../../interface";
import { ExecuteManager } from "../execute_manager";
import { Region_Job } from "./region_job";
import { Region_Project } from "./region_project";
import { Region_Subtask } from "./region_subtask";
import { Util_Parser } from "./util_parser";
export declare class Region_Task {
    target: ExecuteManager;
    task: Task;
    multithread: number;
    task_count: number;
    cron: Array<CronJobState>;
    job: Array<WorkState>;
    runners: Array<Region_Subtask | undefined>;
    jrunners: Array<Region_Job | undefined>;
    constructor(target: ExecuteManager, task: Task);
    get project(): Project;
    get parent(): Region_Project;
    RUN: () => void;
    ExecuteTask_Cronjob(project: Project, task: Task, taskCount: number): boolean;
    ExecuteTask_Single(project: Project, task: Task, taskCount: number): boolean;
    ExecuteTask_Setup(project: Project, task: Task, taskCount: number): boolean;
    ExecuteTask_AllFinish(project: Project, task: Task): void;
    Init_CronContainer: (taskCount: number) => void;
    get_idle: () => Array<WebsocketPack>;
    check_socket_state: (target: WebsocketPack) => ExecuteState.NONE | ExecuteState.RUNNING;
    sync_local_para: (target: Database) => void;
    sync_para: (target: Database, source: WebsocketPack) => void;
    get_idle_open: () => Array<WebsocketPack>;
    check_all_cron_end: () => boolean;
    check_cron_end: (cron: CronJobState) => boolean;
    check_single_end: () => boolean;
    get_task_multi_count: (t: Task) => number;
    get_task_state_count(t: Task): number;
    get_number(key: string): number;
    get_number_global(key: string, localPara: Database | undefined): number;
    database_update: (localPara: Database, n?: number) => Util_Parser;
}
