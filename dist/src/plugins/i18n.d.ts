import { createI18n } from 'vue-i18n';
import { I18n } from "i18n-js";
export { createI18n as Create };
export declare const i18nDefaultData: {
    legacy: boolean;
    locale: string;
    globalInjection: boolean;
    fallbackFormat: string;
    messages: {
        en: {
            login: {
                title: string;
                submit: string;
                account: string;
                password: string;
            };
            guides: {
                workflow: string;
                core: string;
                ui: string;
                project: string;
                task: string;
                job: string;
                database: string;
                console: string;
            };
            profile: {
                username: string;
                description: string;
                admin: string;
            };
            menu: {
                file: string;
                edit: string;
                execute: string;
                help: string;
                "new-project": string;
                import: string;
                export: string;
                quit: string;
                undo: string;
                redo: string;
                cut: string;
                copy: string;
                paste: string;
                delete: string;
                selectAll: string;
                language: string;
                log: string;
                font: string;
                animation: string;
            };
            settings: {
                system: string;
                appearance: string;
                workflow: string;
                token_remove: string;
            };
            toast: {
                server: string;
                node: string;
                cluster: string;
                server_d: string;
                node_d: string;
                cluster_d: string;
                "connection-create-title": string;
                "connection-create-des": string;
                "connection-remove-title": string;
                "connection-remove-des": string;
            };
            modeselect: {
                title: string;
                title2: string;
                titlebar: string;
                welcome: string;
                welcome2: string;
                server: string;
                server2: string;
                url: string;
                confirm: string;
                confirm2: string;
                confirm3: string;
                confirm4: string;
            };
            error: {
                "title-needed": string;
                "url-needed": string;
                "title-repeat": string;
                "project-empty": string;
                "database-empty": string;
                "node-empty": string;
            };
            filter: {
                type: string;
                canwrite: string;
                "show-hidden": string;
                "show-runtime": string;
            };
            modal: {
                "project-template-select": string;
                "database-template-select": string;
                "new-project": string;
                "modify-project": string;
                "delete-project": string;
                "import-project": string;
                "delete-project-confirm": string;
                "delete-project-binding": string;
                "enter-project-name": string;
                "enter-project-description": string;
                "new-task": string;
                "modify-task": string;
                "enter-task-name": string;
                "enter-task-description": string;
                "new-job": string;
                "new-database": string;
                "edit-database": string;
                "delete-database": string;
                "enter-database-name": string;
                "new-database-set": string;
                "clone-database-set": string;
                "edit-database-set": string;
                "enter-database-set-name": string;
                "import-database": string;
                "delete-database-confirm": string;
                "database-datatype": string;
                "create-library": string;
                "enter-library-name": string;
                "enter-library-type": string;
                "new-node": string;
                "enter-node-address": string;
                "skip-step": string;
                "delete-node": string;
                "delete-node-confirm": string;
                "log-recover-project-title": string;
                "log-recover-database-title": string;
                "console-create": string;
                "console-name": string;
                "delete-library": string;
                "delete-library-confirm": string;
                "upload-pic": string;
                "delete-plugin": string;
                "delete-template": string;
                "delete-plugin-confirm": string;
                "delete-template-confirm": string;
                "delete-job": string;
                "delete-job-confirm": string;
            };
            toolbar: {
                server: string;
                compute: string;
                editor: string;
                backend: string;
                project: string;
                task: string;
                job: string;
                database: string;
                node: string;
                console: string;
                log: string;
                library: string;
                client: string;
                setting: string;
                role: string;
                service: string;
                plugin: string;
                profile: string;
            };
            tooltip: {
                "select-server": string;
                "select-node": string;
                "select-cluster": string;
                "project-id": string;
                "project-taskCount": string;
                "task-id": string;
                "task-jobCount": string;
                "task-cronjob": string;
                "task-multi": string;
            };
            jobpage: {
                "if-error": string;
                from: string;
                to: string;
                path: string;
                content: string;
                command: string;
                databases: string;
            };
            enum: {
                jobtype: {
                    "copy-file": string;
                    "copy-dir": string;
                    "delete-file": string;
                    "delete-dir": string;
                    "create-file": string;
                    "create-dir": string;
                    rename: string;
                    lua: string;
                    javascript: string;
                    command: string;
                    lib_command: string;
                };
                jobtype2: {
                    "check-path": string;
                    lua: string;
                    javascript: string;
                };
                jobresult: {
                    none: string;
                    "skip-project": string;
                    "throw-project": string;
                    "skip-task": string;
                    "throw-task": string;
                    "skip-subtask": string;
                    "throw-subtask": string;
                    pause: string;
                };
                project: {
                    default: string;
                    default_short: string;
                    ffmpeg_download: string;
                    concat: string;
                    blender: string;
                    blender_cluster: string;
                    aftereffect: string;
                };
                database: {
                    default: string;
                    ffmpeg: string;
                };
                state: {
                    none: string;
                    running: string;
                    finish: string;
                    error: string;
                    skip: string;
                };
                lua: {
                    default: string;
                    "gs4-sort": string;
                };
                connection: {
                    connecting: string;
                    connected: string;
                    closing: string;
                    closed: string;
                };
                category: {
                    condition: string;
                    execution: string;
                };
            };
            console: {
                list: string;
                dashboard: string;
                database: string;
            };
            types: {
                number: string;
                string: string;
                boolean: string;
                expression: string;
                object: string;
                textarea: string;
                select: string;
                list: string;
            };
            expression: {
                title: string;
                value: string;
                deep: string;
            };
            headers: {
                title: string;
                description: string;
                detail: string;
                type: string;
                multi: string;
                cronjob: string;
                "task-count": string;
                "job-count": string;
            };
            codehint: {
                v_path: string;
                v_os: string;
                v_env: string;
                v_message: string;
                v_http: string;
                v_setTimeout: string;
                v_wait: string;
                v_sleep: string;
                v_console: string;
                v_json: string;
                json: {
                    parse: string;
                    stringify: string;
                };
                console: {
                    log: string;
                };
                path: {
                    filename: string;
                    extname: string;
                    dirname: string;
                };
                os: {
                    exec: string;
                    command: string;
                    plugin_exec: string;
                    plugin_command: string;
                    copyfile: string;
                    copydir: string;
                    deletefile: string;
                    deletedir: string;
                    exist: string;
                    listfile: string;
                    listdir: string;
                    createdir: string;
                    writefile: string;
                    readfile: string;
                    rename: string;
                };
                env: {
                    has: string;
                    get: string;
                    set: string;
                    hasboolean: string;
                    getboolean: string;
                    setboolean: string;
                    hasnumber: string;
                    getnumber: string;
                    setnumber: string;
                    hasstring: string;
                    getstring: string;
                    setstring: string;
                    hasobject: string;
                    getobject: string;
                    setobject: string;
                    haslist: string;
                    getlist: string;
                    setlist: string;
                    hasselect: string;
                    getselect: string;
                    setselect: string;
                    getselectlength: string;
                };
                m: {
                    messager: string;
                    messager_log: string;
                };
            };
            token: string;
            info: string;
            search: string;
            selectall: string;
            unselectall: string;
            project: string;
            task: string;
            job: string;
            database: string;
            create: string;
            "import-template": string;
            "import-plugin": string;
            "import-template-buildin": string;
            "import-plugin-buildin": string;
            clone: string;
            delete: string;
            save: string;
            server: string;
            node: string;
            cluster: string;
            action: string;
            skip: string;
            property: string;
            "create-property": string;
            check: string;
            edit: string;
            modify: string;
            moveup: string;
            movedown: string;
            rename: string;
            execute: string;
            "execute-0": string;
            "execute-1": string;
            "execute-2": string;
            "skip-0": string;
            "skip-1": string;
            stop: string;
            export: string;
            import: string;
            useTemplate: string;
            useExistDatabase: string;
            "execute-keep": string;
            "database-setting": string;
            "database-select": string;
            "is-running": string;
            "is-stop": string;
            clear: string;
            "auto-scroll": string;
            "close-all": string;
            clean: string;
            singlejob: string;
            cronjob: string;
            setupjob: string;
            multicore: string;
            recover: string;
            cancel: string;
            step: string;
            confirm: string;
            close: string;
            enter: string;
            filters: string;
            setting: string;
            guide: string;
            plugin: string;
            template: string;
            loading: string;
            relogin: string;
            yes: string;
            no: string;
            next: string;
            previous: string;
        };
        zh_TW: {
            login: {
                title: string;
                submit: string;
                account: string;
                password: string;
            };
            guides: {
                workflow: string;
                core: string;
                ui: string;
                project: string;
                task: string;
                job: string;
                database: string;
                console: string;
            };
            profile: {
                username: string;
                description: string;
                admin: string;
            };
            menu: {
                file: string;
                edit: string;
                execute: string;
                help: string;
                "new-project": string;
                import: string;
                export: string;
                quit: string;
                undo: string;
                redo: string;
                cut: string;
                copy: string;
                paste: string;
                delete: string;
                selectAll: string;
                language: string;
                log: string;
                font: string;
                animation: string;
            };
            settings: {
                system: string;
                appearance: string;
                workflow: string;
                token_remove: string;
            };
            toast: {
                server: string;
                node: string;
                cluster: string;
                server_d: string;
                node_d: string;
                cluster_d: string;
                "connection-create-title": string;
                "connection-create-des": string;
                "connection-remove-title": string;
                "connection-remove-des": string;
            };
            modeselect: {
                title: string;
                title2: string;
                titlebar: string;
                welcome: string;
                welcome2: string;
                server: string;
                server2: string;
                url: string;
                confirm: string;
                confirm2: string;
                confirm3: string;
                confirm4: string;
            };
            error: {
                "title-needed": string;
                "title-repeat": string;
                "url-needed": string;
                "project-empty": string;
                "database-empty": string;
                "node-empty": string;
            };
            filter: {
                type: string;
                canwrite: string;
                "show-hidden": string;
                "show-runtime": string;
            };
            modal: {
                "project-template-select": string;
                "database-template-select": string;
                "new-project": string;
                "modify-project": string;
                "delete-project": string;
                "import-project": string;
                "delete-project-confirm": string;
                "delete-project-binding": string;
                "enter-project-name": string;
                "enter-project-description": string;
                "new-task": string;
                "modify-task": string;
                "enter-task-name": string;
                "enter-task-description": string;
                "new-job": string;
                "new-database": string;
                "edit-database": string;
                "delete-database": string;
                "enter-database-name": string;
                "new-database-set": string;
                "clone-database-set": string;
                "edit-database-set": string;
                "enter-database-set-name": string;
                "import-database": string;
                "delete-database-confirm": string;
                "database-datatype": string;
                "create-library": string;
                "enter-library-name": string;
                "enter-library-type": string;
                "new-node": string;
                "enter-node-address": string;
                "skip-step": string;
                "delete-node": string;
                "delete-node-confirm": string;
                "log-recover-project-title": string;
                "log-recover-database-title": string;
                "console-create": string;
                "console-name": string;
                "delete-library": string;
                "delete-library-confirm": string;
                "upload-pic": string;
                "delete-plugin": string;
                "delete-template": string;
                "delete-plugin-confirm": string;
                "delete-template-confirm": string;
                "delete-job": string;
                "delete-job-confirm": string;
            };
            toolbar: {
                server: string;
                compute: string;
                editor: string;
                backend: string;
                project: string;
                task: string;
                job: string;
                database: string;
                node: string;
                console: string;
                log: string;
                library: string;
                client: string;
                setting: string;
                role: string;
                service: string;
                plugin: string;
                profile: string;
            };
            tooltip: {
                "select-server": string;
                "select-node": string;
                "select-cluster": string;
                "project-id": string;
                "project-taskCount": string;
                "task-id": string;
                "task-jobCount": string;
                "task-cronjob": string;
                "task-multi": string;
            };
            jobpage: {
                "if-error": string;
                from: string;
                to: string;
                path: string;
                content: string;
                command: string;
                databases: string;
            };
            enum: {
                jobtype: {
                    "copy-file": string;
                    "copy-dir": string;
                    "delete-file": string;
                    "delete-dir": string;
                    "create-file": string;
                    "create-dir": string;
                    rename: string;
                    lua: string;
                    javascript: string;
                    command: string;
                    lib_command: string;
                };
                jobtype2: {
                    "check-path": string;
                    lua: string;
                    javascript: string;
                };
                jobresult: {
                    none: string;
                    "skip-project": string;
                    "throw-project": string;
                    "skip-task": string;
                    "throw-task": string;
                    "skip-subtask": string;
                    "throw-subtask": string;
                    pause: string;
                };
                project: {
                    default: string;
                    default_short: string;
                    ffmpeg_download: string;
                    concat: string;
                    blender: string;
                    blender_cluster: string;
                    aftereffect: string;
                };
                database: {
                    default: string;
                    ffmpeg: string;
                };
                state: {
                    none: string;
                    running: string;
                    finish: string;
                    error: string;
                    skip: string;
                };
                lua: {
                    default: string;
                    "gs4-sort": string;
                };
                connection: {
                    connecting: string;
                    connected: string;
                    closing: string;
                    closed: string;
                };
                category: {
                    condition: string;
                    execution: string;
                };
            };
            console: {
                list: string;
                dashboard: string;
                database: string;
            };
            types: {
                number: string;
                string: string;
                boolean: string;
                expression: string;
                object: string;
                textarea: string;
                select: string;
                list: string;
            };
            expression: {
                title: string;
                value: string;
                deep: string;
            };
            headers: {
                title: string;
                description: string;
                detail: string;
                type: string;
                multi: string;
                cronjob: string;
                "task-count": string;
                "job-count": string;
            };
            codehint: {
                v_path: string;
                v_os: string;
                v_env: string;
                v_message: string;
                v_http: string;
                v_setTimeout: string;
                v_wait: string;
                v_sleep: string;
                v_console: string;
                v_json: string;
                json: {
                    parse: string;
                    stringify: string;
                };
                console: {
                    log: string;
                };
                path: {
                    filename: string;
                    extname: string;
                    dirname: string;
                };
                os: {
                    exec: string;
                    command: string;
                    plugin_exec: string;
                    plugin_command: string;
                    copyfile: string;
                    copydir: string;
                    deletefile: string;
                    deletedir: string;
                    exist: string;
                    listfile: string;
                    listdir: string;
                    createdir: string;
                    writefile: string;
                    readfile: string;
                    rename: string;
                };
                env: {
                    has: string;
                    get: string;
                    set: string;
                    hasboolean: string;
                    getboolean: string;
                    setboolean: string;
                    hasnumber: string;
                    getnumber: string;
                    setnumber: string;
                    hasstring: string;
                    getstring: string;
                    setstring: string;
                    hasobject: string;
                    getobject: string;
                    setobject: string;
                    haslist: string;
                    getlist: string;
                    setlist: string;
                    hasselect: string;
                    getselect: string;
                    setselect: string;
                    getselectlength: string;
                };
                m: {
                    messager: string;
                    messager_log: string;
                };
            };
            token: string;
            info: string;
            search: string;
            selectall: string;
            unselectall: string;
            project: string;
            task: string;
            job: string;
            database: string;
            create: string;
            "import-template": string;
            "import-plugin": string;
            "import-template-buildin": string;
            "import-plugin-buildin": string;
            clone: string;
            delete: string;
            save: string;
            server: string;
            node: string;
            cluster: string;
            action: string;
            skip: string;
            property: string;
            "create-property": string;
            check: string;
            edit: string;
            modify: string;
            moveup: string;
            movedown: string;
            rename: string;
            execute: string;
            "execute-0": string;
            "execute-1": string;
            "execute-2": string;
            "skip-0": string;
            "skip-1": string;
            stop: string;
            export: string;
            import: string;
            useTemplate: string;
            useExistParameter: string;
            "execute-keep": string;
            "database-setting": string;
            "database-select": string;
            "is-running": string;
            "is-stop": string;
            clear: string;
            "auto-scroll": string;
            "close-all": string;
            clean: string;
            singlejob: string;
            cronjob: string;
            setupjob: string;
            multicore: string;
            recover: string;
            cancel: string;
            step: string;
            confirm: string;
            close: string;
            enter: string;
            filters: string;
            setting: string;
            guide: string;
            plugin: string;
            template: string;
            loading: string;
            relogin: string;
            yes: string;
            no: string;
            next: string;
            previous: string;
        };
    };
};
export declare const i18n: import("vue-i18n").I18n<{
    en: {
        login: {
            title: string;
            submit: string;
            account: string;
            password: string;
        };
        guides: {
            workflow: string;
            core: string;
            ui: string;
            project: string;
            task: string;
            job: string;
            database: string;
            console: string;
        };
        profile: {
            username: string;
            description: string;
            admin: string;
        };
        menu: {
            file: string;
            edit: string;
            execute: string;
            help: string;
            "new-project": string;
            import: string;
            export: string;
            quit: string;
            undo: string;
            redo: string;
            cut: string;
            copy: string;
            paste: string;
            delete: string;
            selectAll: string;
            language: string;
            log: string;
            font: string;
            animation: string;
        };
        settings: {
            system: string;
            appearance: string;
            workflow: string;
            token_remove: string;
        };
        toast: {
            server: string;
            node: string;
            cluster: string;
            server_d: string;
            node_d: string;
            cluster_d: string;
            "connection-create-title": string;
            "connection-create-des": string;
            "connection-remove-title": string;
            "connection-remove-des": string;
        };
        modeselect: {
            title: string;
            title2: string;
            titlebar: string;
            welcome: string;
            welcome2: string;
            server: string;
            server2: string;
            url: string;
            confirm: string;
            confirm2: string;
            confirm3: string;
            confirm4: string;
        };
        error: {
            "title-needed": string;
            "url-needed": string;
            "title-repeat": string;
            "project-empty": string;
            "database-empty": string;
            "node-empty": string;
        };
        filter: {
            type: string;
            canwrite: string;
            "show-hidden": string;
            "show-runtime": string;
        };
        modal: {
            "project-template-select": string;
            "database-template-select": string;
            "new-project": string;
            "modify-project": string;
            "delete-project": string;
            "import-project": string;
            "delete-project-confirm": string;
            "delete-project-binding": string;
            "enter-project-name": string;
            "enter-project-description": string;
            "new-task": string;
            "modify-task": string;
            "enter-task-name": string;
            "enter-task-description": string;
            "new-job": string;
            "new-database": string;
            "edit-database": string;
            "delete-database": string;
            "enter-database-name": string;
            "new-database-set": string;
            "clone-database-set": string;
            "edit-database-set": string;
            "enter-database-set-name": string;
            "import-database": string;
            "delete-database-confirm": string;
            "database-datatype": string;
            "create-library": string;
            "enter-library-name": string;
            "enter-library-type": string;
            "new-node": string;
            "enter-node-address": string;
            "skip-step": string;
            "delete-node": string;
            "delete-node-confirm": string;
            "log-recover-project-title": string;
            "log-recover-database-title": string;
            "console-create": string;
            "console-name": string;
            "delete-library": string;
            "delete-library-confirm": string;
            "upload-pic": string;
            "delete-plugin": string;
            "delete-template": string;
            "delete-plugin-confirm": string;
            "delete-template-confirm": string;
            "delete-job": string;
            "delete-job-confirm": string;
        };
        toolbar: {
            server: string;
            compute: string;
            editor: string;
            backend: string;
            project: string;
            task: string;
            job: string;
            database: string;
            node: string;
            console: string;
            log: string;
            library: string;
            client: string;
            setting: string;
            role: string;
            service: string;
            plugin: string;
            profile: string;
        };
        tooltip: {
            "select-server": string;
            "select-node": string;
            "select-cluster": string;
            "project-id": string;
            "project-taskCount": string;
            "task-id": string;
            "task-jobCount": string;
            "task-cronjob": string;
            "task-multi": string;
        };
        jobpage: {
            "if-error": string;
            from: string;
            to: string;
            path: string;
            content: string;
            command: string;
            databases: string;
        };
        enum: {
            jobtype: {
                "copy-file": string;
                "copy-dir": string;
                "delete-file": string;
                "delete-dir": string;
                "create-file": string;
                "create-dir": string;
                rename: string;
                lua: string;
                javascript: string;
                command: string;
                lib_command: string;
            };
            jobtype2: {
                "check-path": string;
                lua: string;
                javascript: string;
            };
            jobresult: {
                none: string;
                "skip-project": string;
                "throw-project": string;
                "skip-task": string;
                "throw-task": string;
                "skip-subtask": string;
                "throw-subtask": string;
                pause: string;
            };
            project: {
                default: string;
                default_short: string;
                ffmpeg_download: string;
                concat: string;
                blender: string;
                blender_cluster: string;
                aftereffect: string;
            };
            database: {
                default: string;
                ffmpeg: string;
            };
            state: {
                none: string;
                running: string;
                finish: string;
                error: string;
                skip: string;
            };
            lua: {
                default: string;
                "gs4-sort": string;
            };
            connection: {
                connecting: string;
                connected: string;
                closing: string;
                closed: string;
            };
            category: {
                condition: string;
                execution: string;
            };
        };
        console: {
            list: string;
            dashboard: string;
            database: string;
        };
        types: {
            number: string;
            string: string;
            boolean: string;
            expression: string;
            object: string;
            textarea: string;
            select: string;
            list: string;
        };
        expression: {
            title: string;
            value: string;
            deep: string;
        };
        headers: {
            title: string;
            description: string;
            detail: string;
            type: string;
            multi: string;
            cronjob: string;
            "task-count": string;
            "job-count": string;
        };
        codehint: {
            v_path: string;
            v_os: string;
            v_env: string;
            v_message: string;
            v_http: string;
            v_setTimeout: string;
            v_wait: string;
            v_sleep: string;
            v_console: string;
            v_json: string;
            json: {
                parse: string;
                stringify: string;
            };
            console: {
                log: string;
            };
            path: {
                filename: string;
                extname: string;
                dirname: string;
            };
            os: {
                exec: string;
                command: string;
                plugin_exec: string;
                plugin_command: string;
                copyfile: string;
                copydir: string;
                deletefile: string;
                deletedir: string;
                exist: string;
                listfile: string;
                listdir: string;
                createdir: string;
                writefile: string;
                readfile: string;
                rename: string;
            };
            env: {
                has: string;
                get: string;
                set: string;
                hasboolean: string;
                getboolean: string;
                setboolean: string;
                hasnumber: string;
                getnumber: string;
                setnumber: string;
                hasstring: string;
                getstring: string;
                setstring: string;
                hasobject: string;
                getobject: string;
                setobject: string;
                haslist: string;
                getlist: string;
                setlist: string;
                hasselect: string;
                getselect: string;
                setselect: string;
                getselectlength: string;
            };
            m: {
                messager: string;
                messager_log: string;
            };
        };
        token: string;
        info: string;
        search: string;
        selectall: string;
        unselectall: string;
        project: string;
        task: string;
        job: string;
        database: string;
        create: string;
        "import-template": string;
        "import-plugin": string;
        "import-template-buildin": string;
        "import-plugin-buildin": string;
        clone: string;
        delete: string;
        save: string;
        server: string;
        node: string;
        cluster: string;
        action: string;
        skip: string;
        property: string;
        "create-property": string;
        check: string;
        edit: string;
        modify: string;
        moveup: string;
        movedown: string;
        rename: string;
        execute: string;
        "execute-0": string;
        "execute-1": string;
        "execute-2": string;
        "skip-0": string;
        "skip-1": string;
        stop: string;
        export: string;
        import: string;
        useTemplate: string;
        useExistDatabase: string;
        "execute-keep": string;
        "database-setting": string;
        "database-select": string;
        "is-running": string;
        "is-stop": string;
        clear: string;
        "auto-scroll": string;
        "close-all": string;
        clean: string;
        singlejob: string;
        cronjob: string;
        setupjob: string;
        multicore: string;
        recover: string;
        cancel: string;
        step: string;
        confirm: string;
        close: string;
        enter: string;
        filters: string;
        setting: string;
        guide: string;
        plugin: string;
        template: string;
        loading: string;
        relogin: string;
        yes: string;
        no: string;
        next: string;
        previous: string;
    };
    zh_TW: {
        login: {
            title: string;
            submit: string;
            account: string;
            password: string;
        };
        guides: {
            workflow: string;
            core: string;
            ui: string;
            project: string;
            task: string;
            job: string;
            database: string;
            console: string;
        };
        profile: {
            username: string;
            description: string;
            admin: string;
        };
        menu: {
            file: string;
            edit: string;
            execute: string;
            help: string;
            "new-project": string;
            import: string;
            export: string;
            quit: string;
            undo: string;
            redo: string;
            cut: string;
            copy: string;
            paste: string;
            delete: string;
            selectAll: string;
            language: string;
            log: string;
            font: string;
            animation: string;
        };
        settings: {
            system: string;
            appearance: string;
            workflow: string;
            token_remove: string;
        };
        toast: {
            server: string;
            node: string;
            cluster: string;
            server_d: string;
            node_d: string;
            cluster_d: string;
            "connection-create-title": string;
            "connection-create-des": string;
            "connection-remove-title": string;
            "connection-remove-des": string;
        };
        modeselect: {
            title: string;
            title2: string;
            titlebar: string;
            welcome: string;
            welcome2: string;
            server: string;
            server2: string;
            url: string;
            confirm: string;
            confirm2: string;
            confirm3: string;
            confirm4: string;
        };
        error: {
            "title-needed": string;
            "title-repeat": string;
            "url-needed": string;
            "project-empty": string;
            "database-empty": string;
            "node-empty": string;
        };
        filter: {
            type: string;
            canwrite: string;
            "show-hidden": string;
            "show-runtime": string;
        };
        modal: {
            "project-template-select": string;
            "database-template-select": string;
            "new-project": string;
            "modify-project": string;
            "delete-project": string;
            "import-project": string;
            "delete-project-confirm": string;
            "delete-project-binding": string;
            "enter-project-name": string;
            "enter-project-description": string;
            "new-task": string;
            "modify-task": string;
            "enter-task-name": string;
            "enter-task-description": string;
            "new-job": string;
            "new-database": string;
            "edit-database": string;
            "delete-database": string;
            "enter-database-name": string;
            "new-database-set": string;
            "clone-database-set": string;
            "edit-database-set": string;
            "enter-database-set-name": string;
            "import-database": string;
            "delete-database-confirm": string;
            "database-datatype": string;
            "create-library": string;
            "enter-library-name": string;
            "enter-library-type": string;
            "new-node": string;
            "enter-node-address": string;
            "skip-step": string;
            "delete-node": string;
            "delete-node-confirm": string;
            "log-recover-project-title": string;
            "log-recover-database-title": string;
            "console-create": string;
            "console-name": string;
            "delete-library": string;
            "delete-library-confirm": string;
            "upload-pic": string;
            "delete-plugin": string;
            "delete-template": string;
            "delete-plugin-confirm": string;
            "delete-template-confirm": string;
            "delete-job": string;
            "delete-job-confirm": string;
        };
        toolbar: {
            server: string;
            compute: string;
            editor: string;
            backend: string;
            project: string;
            task: string;
            job: string;
            database: string;
            node: string;
            console: string;
            log: string;
            library: string;
            client: string;
            setting: string;
            role: string;
            service: string;
            plugin: string;
            profile: string;
        };
        tooltip: {
            "select-server": string;
            "select-node": string;
            "select-cluster": string;
            "project-id": string;
            "project-taskCount": string;
            "task-id": string;
            "task-jobCount": string;
            "task-cronjob": string;
            "task-multi": string;
        };
        jobpage: {
            "if-error": string;
            from: string;
            to: string;
            path: string;
            content: string;
            command: string;
            databases: string;
        };
        enum: {
            jobtype: {
                "copy-file": string;
                "copy-dir": string;
                "delete-file": string;
                "delete-dir": string;
                "create-file": string;
                "create-dir": string;
                rename: string;
                lua: string;
                javascript: string;
                command: string;
                lib_command: string;
            };
            jobtype2: {
                "check-path": string;
                lua: string;
                javascript: string;
            };
            jobresult: {
                none: string;
                "skip-project": string;
                "throw-project": string;
                "skip-task": string;
                "throw-task": string;
                "skip-subtask": string;
                "throw-subtask": string;
                pause: string;
            };
            project: {
                default: string;
                default_short: string;
                ffmpeg_download: string;
                concat: string;
                blender: string;
                blender_cluster: string;
                aftereffect: string;
            };
            database: {
                default: string;
                ffmpeg: string;
            };
            state: {
                none: string;
                running: string;
                finish: string;
                error: string;
                skip: string;
            };
            lua: {
                default: string;
                "gs4-sort": string;
            };
            connection: {
                connecting: string;
                connected: string;
                closing: string;
                closed: string;
            };
            category: {
                condition: string;
                execution: string;
            };
        };
        console: {
            list: string;
            dashboard: string;
            database: string;
        };
        types: {
            number: string;
            string: string;
            boolean: string;
            expression: string;
            object: string;
            textarea: string;
            select: string;
            list: string;
        };
        expression: {
            title: string;
            value: string;
            deep: string;
        };
        headers: {
            title: string;
            description: string;
            detail: string;
            type: string;
            multi: string;
            cronjob: string;
            "task-count": string;
            "job-count": string;
        };
        codehint: {
            v_path: string;
            v_os: string;
            v_env: string;
            v_message: string;
            v_http: string;
            v_setTimeout: string;
            v_wait: string;
            v_sleep: string;
            v_console: string;
            v_json: string;
            json: {
                parse: string;
                stringify: string;
            };
            console: {
                log: string;
            };
            path: {
                filename: string;
                extname: string;
                dirname: string;
            };
            os: {
                exec: string;
                command: string;
                plugin_exec: string;
                plugin_command: string;
                copyfile: string;
                copydir: string;
                deletefile: string;
                deletedir: string;
                exist: string;
                listfile: string;
                listdir: string;
                createdir: string;
                writefile: string;
                readfile: string;
                rename: string;
            };
            env: {
                has: string;
                get: string;
                set: string;
                hasboolean: string;
                getboolean: string;
                setboolean: string;
                hasnumber: string;
                getnumber: string;
                setnumber: string;
                hasstring: string;
                getstring: string;
                setstring: string;
                hasobject: string;
                getobject: string;
                setobject: string;
                haslist: string;
                getlist: string;
                setlist: string;
                hasselect: string;
                getselect: string;
                setselect: string;
                getselectlength: string;
            };
            m: {
                messager: string;
                messager_log: string;
            };
        };
        token: string;
        info: string;
        search: string;
        selectall: string;
        unselectall: string;
        project: string;
        task: string;
        job: string;
        database: string;
        create: string;
        "import-template": string;
        "import-plugin": string;
        "import-template-buildin": string;
        "import-plugin-buildin": string;
        clone: string;
        delete: string;
        save: string;
        server: string;
        node: string;
        cluster: string;
        action: string;
        skip: string;
        property: string;
        "create-property": string;
        check: string;
        edit: string;
        modify: string;
        moveup: string;
        movedown: string;
        rename: string;
        execute: string;
        "execute-0": string;
        "execute-1": string;
        "execute-2": string;
        "skip-0": string;
        "skip-1": string;
        stop: string;
        export: string;
        import: string;
        useTemplate: string;
        useExistParameter: string;
        "execute-keep": string;
        "database-setting": string;
        "database-select": string;
        "is-running": string;
        "is-stop": string;
        clear: string;
        "auto-scroll": string;
        "close-all": string;
        clean: string;
        singlejob: string;
        cronjob: string;
        setupjob: string;
        multicore: string;
        recover: string;
        cancel: string;
        step: string;
        confirm: string;
        close: string;
        enter: string;
        filters: string;
        setting: string;
        guide: string;
        plugin: string;
        template: string;
        loading: string;
        relogin: string;
        yes: string;
        no: string;
        next: string;
        previous: string;
    };
}, {}, {}, string, true>;
export declare const raw_i18n: I18n;
