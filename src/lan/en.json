{
    "login": {
        "title": "Account Login",
        "submit": "Submit",
        "account": "Account",
        "password": "Password"
    },
    "guides": {
        "workflow": "Workflow",
        "core": "Core Mechanism",
        "ui": "UI Structure",
        "project": "Project Container",
        "task": "Task Container",
        "job": "Job Container",
        "database": "Database Binding",
        "console": "Console"
    },
    "profile": {
        "username": "Username",
        "description": "Description",
        "admin": "Is Admin"
    },
    "menu": {
        "file": "File",
        "edit": "Edit",
        "execute": "Execute",
        "help": "Help",
        "new-project": "New Project",
        "import": "Import",
        "export": "Export",
        "quit": "Quit",
        "undo": "Undo",
        "redo": "Redo",
        "cut": "Cut",
        "copy": "Copy",
        "paste": "Paste",
        "delete": "Delete",
        "selectAll": "Select All",
        "language": "Language",
        "log": "Log",
        "font": "Font Size",
        "animation": "animation"
    },
    "settings": {
        "system": "System",
        "appearance": "Appearance",
        "workflow": "Workflow",
        "token_remove": "Are you sure you want to remove the token"
    },
    "toast": {
        "server": "Server Mode",
        "node": "Node Mode",
        "cluster": "Cluster Mode",
        "server_d": "Select server mode, You can control node by using monitor",
        "node_d": "Select node mode, You are waiting server to connect...",
        "cluster_d": "Select cluster mode, You can group all the node in your area now",
        "connection-create-title": "Connection Establish",
        "connection-create-des": "Create new connection",
        "connection-remove-title": "Disconnect",
        "connection-remove-des": "Disconnect detected"
    },
    "modeselect": {
        "title": "Role",
        "title2": "Please select your role",
        "titlebar": "Role Selection",
        "welcome": "Welcome to verteilen",
        "welcome2": "Finish the configuration, to define your identify",
        "server": "Server Mode",
        "server2": "Do you want to use this app as client side only?",
        "url": "Server URL",
        "confirm": "Final Step",
        "confirm2": "Final confirm, It will send you to homepage, after you click confirm button",
        "confirm3": "Server Mode",
        "confirm4": "Role"
    },
    "error": {
        "title-needed": "Title is needed",
        "url-needed": "URL is needed",
        "title-repeat": "Cannot use title which already exists",
        "project-empty": "Project list cannot be zero",
        "database-empty": "Project must binding with database",
        "node-empty": "node list cannot be zero"
    },
    "filter": {
        "type": "Datatype",
        "canwrite": "Runtime Write",
        "show-hidden": "Hidden",
        "show-runtime": "Runtime"
    },
    "modal": {
        "project-template-select": "Select Template",
        "database-template-select": "Select Template",
        "new-project": "New Project",
        "modify-project": "Modify Project",
        "delete-project": "Delete Project",
        "import-project": "Import Project",
        "delete-project-confirm": "Are you sure delete projects below",
        "delete-project-binding": "Delete the binding database set as well",
        "enter-project-name": "Enter Project Name",
        "enter-project-description": "Enter Project Description",
        "new-task": "New Task",
        "modify-task": "Modify Task",
        "enter-task-name": "Enter Task Name",
        "enter-task-description": "Enter Task Description",
        "new-job": "New Job",
        "new-database": "New Database",
        "edit-database": "Modify Database",
        "delete-database": "Delete Database",
        "enter-database-name": "Enter Database Name",
        "new-database-set": "New Database Set",
        "clone-database-set": "Clone Database Set",
        "edit-database-set": "Modify Database Set",
        "enter-database-set-name": "Enter Database Set Name",
        "import-database": "Delete Database",
        "delete-database-confirm": "Are you sure delete database you selected",
        "database-datatype": "Datatype",
        "create-library": "Create Lib",
        "enter-library-name": "Enter Lib Name",
        "enter-library-type": "Enter Lib Type",
        "new-node": "New Node",
        "enter-node-address": "Enter Node Address",
        "skip-step": "Skip Step",
        "delete-node": "Delete Node",
        "delete-node-confirm": "Are you sure delete nodes below",
        "log-recover-project-title": "New Project Title",
        "log-recover-database-title": "New Database Title",
        "console-create": "Create Console",
        "console-name": "Console Name",
        "delete-library": "Library Delete",
        "delete-library-confirm": "Are you sure delete this script",
        "upload-pic": "Upload Profile Picture",
        "delete-plugin": "Delete Plugin",
        "delete-template": "Delete Template",
        "delete-plugin-confirm": "Are you sure delete plugin you selected",
        "delete-template-confirm": "Are you sure delete template you selected",
        "delete-job": "Delete Job",
        "delete-job-confirm": "Are you sure you want to delete this job?"
    },
    "toolbar": {
        "server": "Server",
        "compute": "Compute",
        "editor": "Editor",
        "backend": "Backend Feature",
        "project": "Project (Q)",
        "task": "Task (W)",
        "job": "Job (E)",
        "database": "Database (R)",
        "node": "Node (A)",
        "console": "Console (S)",
        "log": "Log (D)",
        "library": "Library (F)",
        "client": "Self (Z)",
        "setting": "Setting",
        "role": "Role (X)",
        "service": "Service (C)",
        "plugin": "Plugin (G)",
        "profile": "Profile (B)"
    },
    "tooltip": {
        "select-server": "The one who send the command to client",
        "select-node": "The one who received job request from server",
        "select-cluster": "The cluster node for nodes collection",
        "project-id": "Project UUID",
        "project-taskCount": "Total task count for this project",
        "task-id": "Task UUID",
        "task-jobCount": "Total job count for this task",
        "task-cronjob": "Use multiple node to compute",
        "task-multi": "Use multi-core to compute"
    },
    "jobpage": {
        "if-error": "If Error",
        "from": "From",
        "to": "To",
        "path": "Path",
        "content": "Content",
        "command": "Command",
        "databases": "Databases"
    },
    "enum":{
        "jobtype": {
            "copy-file": "Copy File",
            "copy-dir": "Copy Dir",
            "delete-file": "Delete File",
            "delete-dir": "Delete Dir",
            "create-file": "Create File",
            "create-dir": "Create Dir",
            "rename": "Rename Path",
            "lua": "Lua",
            "javascript": "Javascript",
            "command": "Command",
            "lib_command": "Plugin Command"
        },
        "jobtype2": {
            "check-path": "Check Path",
            "lua": "Lua",
            "javascript": "Javascript"
        },
        "jobresult": {
            "none": "None",
            "skip-project": "Skip Project",
            "throw-project": "Throw Project",
            "skip-task": "Skip Task",
            "throw-task": "Throw Task",
            "skip-subtask": "Skip SubTask",
            "throw-subtask": "Throw SubTask",
            "pause": "Pause"
        },
        "project": {
            "default": "Example",
            "default_short": "Example Short",
            "ffmpeg_download": "FFmpeg Download",
            "concat": "FFmpeg concat",
            "blender": "Blender Render",
            "blender_cluster": "Blender Cluster Render",
            "aftereffect": "After Effect Render"
        },
        "database": {
            "default": "Default",
            "ffmpeg": "FFmpeg"
        },
        "state": {
            "none": "Prepare",
            "running": "Running",
            "finish": "Finish",
            "error": "Error",
            "skip": "Skip"
        },
        "lua": {
            "default": "Default",
            "gs4-sort": "GS4 Sorting Prepare Folder"
        },
        "connection": {
            "connecting": "Connecting...",
            "connected": "Connected",
            "closing": "Closing...",
            "closed": "Closed"
        },
        "category": {
            "condition": "Condition",
            "execution": "Execution"
        }
    },
    "console": {
        "list": "Project List",
        "dashboard": "Dashboard",
        "database": "Database"
    },
    "types": {
        "number": "Number",
        "string": "String",
        "boolean": "Boolean",
        "expression": "Expression",
        "object": "Object",
        "textarea": "Textarea",
        "select": "Select",
        "list": "List"
    },
    "expression": {
        "title": "Title",
        "value": "Expression",
        "deep": "Depth"
    },
    "headers": {
        "title": "Title",
        "description": "Description",
        "detail": "Action",
        "type": "Type",
        "multi": "Multi",
        "cronjob": "Distribute",
        "task-count": "Task Count",
        "job-count": "Job Count"
    },
    "codehint": {
        "v_path": "Path module",
        "v_os": "Operation system action module",
        "v_env": "Environment module",
        "v_message": "Messager module",
        "v_http": "Http module",
        "v_setTimeout": "setTimeout(callback,time:number)\nExecute methoid after #time milliseconds",
        "v_wait": "wait(time:number)=>Promise<void>\nWaiting for #time seconds",
        "v_sleep": "sleep(time:number)\nStop the thread for #time seconds",
        "v_console": "Console Module",
        "v_json": "JSON module",
        "json": {
            "parse": "Convert text to json object",
            "stringify": "Convert json object to text"
        },
        "console": {
            "log": "Print message"
        },
        "path": {
            "filename": "filename(path:string,extension:boolean)=>string\nGet file name\n* path: The path string\n* extension: include the extension string",
            "extname": "extname(path:string)=>string\n",
            "dirname": "dirname(path:string)=>string\n"
        },
        "os": {
            "exec": "exec(command:string,args:string,cwd?:string)",
            "command": "command(command:string,args:string,cwd?:string)=>Promise<void>",
            "plugin_exec": "plugin_exec(command:string,args:string)",
            "plugin_command": "plugin_command(command:string,args:string)=>Promise<void>",
            "copyfile": "copyfile(from:string,to:string)",
            "copydir": "copydir(from:string,to: string)",
            "deletefile": "deletefile(path:string)",
            "deletedir": "deletedir(path:string)",
            "exist": "exist(path:string):boolean",
            "listfile": "listfile(path:string):string[]",
            "listdir": "listdir(path:string):string[]",
            "createdir": "createdir(path:string)",
            "writefile": "writefile(path:string,data:string)",
            "readfile": "readfile(path:string):string",
            "rename": "rename(from:string,to:string)"
        },
        "env": {
            "has": "has(key:string,checker?:DatatypeChecker):boolean",
            "get": "get(key:string,checker?:DatatypeChecker):any",
            "set": "set(key:string,value:any)",
            "hasboolean": "hasboolean(key:string,checker?:DatatypeChecker):boolean",
            "getboolean": "getboolean(key:string):boolean",
            "setboolean": "setboolean(key:string,value:boolean)",
            "hasnumber": "hasnumber(key:string,checker?:DatatypeChecker):boolean",
            "getnumber": "getnumber(key:string):number",
            "setnumber": "setnumber(key:string,value:number)",
            "hasstring": "hasstring(key:string,checker?:DatatypeChecker):boolean",
            "getstring": "getstring(key:string):string",
            "setstring": "setstring(key:string,value:string)",
            "hasobject": "hasobject(key:string,checker?:DatatypeChecker):boolean",
            "getobject": "getobject(key:string):any",
            "setobject": "setobject(key:string,value:any)",
            "haslist": "haslist(key:string,checker?:DatatypeChecker):boolean",
            "getlist": "getlist(key:string):any[]",
            "setlist": "setlist(key:string,value:any[])",
            "hasselect": "hasselect(key:string,checker?:DatatypeChecker):boolean",
            "getselect": "getselect(key:string):string",
            "setselect": "setselect(key:string,value:numer)",
            "getselectlength": "getselect(key:string):number"
        },
        "m": {
            "messager": "messager(message:string)",
            "messager_log": "messager_log(message:string)"
        }
    },
    "token": "Token",
    "info": "Information",
    "search": "Search",
    "selectall": "Select All",
    "unselectall": "Unselect All",
    "project": "Project",
    "task": "Task",
    "job": "JOB",
    "database": "Database",
    "create": "Create",
    "import-template": "Import Template",
    "import-plugin": "Import Plugin",
    "import-template-buildin": "Import Buildin Template",
    "import-plugin-buildin": "Import Buildin Plugin",
    "clone": "Clone",
    "delete": "Delete",
    "save": "Save",
    "server": "Server",
    "node": "Node",
    "cluster": "Cluster",
    "action": "Action",
    "skip": "Skip",
    "property": "Property",
    "create-property": "Create Property",
    "check": "Check",
    "edit": "Edit",
    "modify": "Modify",
    "moveup": "Move-Up",
    "movedown": "Move-Down",
    "rename": "Rename",
    "execute": "Execute",
    "execute-0": "All",
    "execute-1": "Project",
    "execute-2": "Task",
    "skip-0": "Skip Project",
    "skip-1": "Skip Task",
    "stop": "Stop",
    "export": "Export",
    "import": "Import",
    "useTemplate": "Use Template",
    "useExistDatabase": "Use Exist Database",
    "execute-keep": "Execute (Keep)",
    "database-setting": "Database Setting",
    "database-select": "Database Select",
    "is-running": "Is Running",
    "is-stop": "Is Stop",
    "clear": "Clear",
    "auto-scroll": "Auto Scroll",
    "close-all": "Close All",
    "clean": "Clean",
    "singlejob": "Single",
    "cronjob": "Distribute",
    "setupjob": "Setup",
    "multicore": "Multicore",
    "recover": "Recover",
    "cancel": "Cancel",
    "step": "Step",
    "confirm": "Confirm",
    "close": "Close",
    "enter": "Enter",
    "filters": "Filters",
    "setting": "Setting",
    "guide": "Guide",
    "plugin": "Plugin",
    "template": "Template",
    "loading": "Loading",
    "relogin": "Re-Login",
    "yes": "Yes",
    "no": "No",
    "next": "Next",
    "previous": "Previous"
}
